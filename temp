
pAVL suppMinAVL(pAVL a, int *h, pStation station) {
    pAVL temp;
    if (a->fg == NULL) {
        // Trouvé le plus petit élément
        *pe = a->station; // Sauvegarde la valeur
        *h = -1; // Réduction de la hauteur
        temp = a;
        a = a->fd; // Le sous-arbre droit devient la racine
        free(temp);
        return a;
    } else {
        a->fg = suppMinAVL(a->fg, h, pe); // Recherche récursive à gauche
        *h = -*h;
    }

    // Mise à jour et rééquilibrage après suppression
    if (*h != 0) {
        a->eq += *h;
        a = equilibrerAVL(a);
        *h = (a->eq == 0) ? -1 : 0;
    }
    return a;
}

pAVL suppressionAVL(pAVL a, int e, int *h) {
    pAVL temp;
    if (a == NULL) {
        // Élément introuvable
        *h = 0; //attenttion faute dans le CM
        return a;
    }
    if (e > a->station->id) {
        // Recherche dans le sous-arbre droit
        a->fd = suppressionAVL(a->fd, e, h);
    } else if (e < a->station->id) {
        // Recherche dans le sous-arbre gauche
        a->fg = suppressionAVL(a->fg, e, h);
        *h = -*h;
    } else if (a->fd != NULL) {
        // Si le nœud a un fils droit
        a->fd = suppMinAVL(a->fd, h, &(a->station));
    } else {
        // Cas du nœud feuille ou avec un seul fils gauche
        temp = a;
        a = a->fg;
        free(temp);
        *h = -1;
        return a;
    }
    if (a == NULL) {
        return a;
    }
    // Mise à jour et rééquilibrage après suppression
    if (*h != 0) {
        a->eq += *h;
        a = equilibrerAVL(a);
        *h = (a->eq == 0) ? -1 : 0;
    }
    return a;
}

